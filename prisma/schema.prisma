// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider        = "prisma-client-js"
    previewFeatures = ["referentialIntegrity"]
}

datasource db {
    provider             = "mysql"
    url                  = env("DATABASE_URL")
    referentialIntegrity = "prisma"
}

// Necessary for Next auth
model Account {
    id                String  @id @default(cuid())
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String? @db.LongText
    access_token      String? @db.LongText
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? @db.LongText
    session_state     String?
    user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
    id            String    @id @default(cuid())
    name          String?
    email         String?   @unique
    emailVerified DateTime?
    image         String?
    accounts      Account[]
    sessions      Session[]
    Product       Product[]
    Sell          Sell[]
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}

model Product {
    id          String   @id @default(cuid())
    description String?
    cost        Decimal
    price       Int
    stock       Int
    createdAt   DateTime @default(now())
    updatedAt   DateTime @updatedAt

    userId      String
    user        User          @relation(fields: [userId], references: [id], onDelete: Cascade)
    SellProduct SellProduct[]
}

model Sell {
    id            String  @id @default(cuid())
    customer_name String?

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    sellerId    String
    user        User          @relation(fields: [sellerId], references: [id], onDelete: Cascade)
    SellProduct SellProduct[]
}

model SellProduct {
    id       String @id @default(cuid())
    quantity Int

    product   Product @relation(fields: [productId], references: [id], onDelete: Cascade)
    productId String

    sell   Sell   @relation(fields: [sellId], references: [id], onDelete: Cascade)
    sellId String
}
